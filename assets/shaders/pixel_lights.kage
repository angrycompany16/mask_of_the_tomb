//kage:unit pixels

package main

var (
    CamShake vec2
    Pos0 vec2
    InnerRadius0 float
    OuterRadius0 float
    Color0 vec3

    // LightPos1 vec2
    // LightColor1 vec4

    // LightPos2 vec2
    // LightColor2 vec4

    AmbientLight vec4
)

// What should be shaded?
func Fragment(dstPos vec4, srcPos vec2) vec4 {
    normal := imageSrc2At(srcPos - CamShake).xyz

    // Need position relative to object
    attenuation := 1-smoothstep(InnerRadius0, OuterRadius0, distance(srcPos, Pos0))
    direction := vec3(normalize(Pos0), 0.0)
    diffuseStrength := max(0.0, dot(normalize(normal), direction))

    // diffuseLight := vec4(diffuseStrength * LightColor0, 1.0)
    // lightDist0 := distance(LightPos0, srcPos) / 1000.0

    // lighting := AmbientLight + diffuseLight

    // srcColor := imageSrc0At(srcPos - CamShake)
    
    // // color = modelColor * lighting
    // color := srcColor * lighting
    return vec4(vec3(attenuation*diffuseStrength), 1.0)
}

func clip(x float, threshold float) float {
    return clamp((x - threshold) / (1 - threshold), 0.0, 1.0)
}