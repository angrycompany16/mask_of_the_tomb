//kage:unit pixels

package main

var Time float
var Amplitude float
var Frequency float
var Strength float
var Threshold float
var Color vec4
var Center vec2
var Resolution vec2

// --- ALT COLORS ---
// BRIGHT := vec4(58.0 / 255.0, 92.0 / 255.0, 133.0 / 255.0, 1.0)
// MEDIUM_BRIGHT := vec4(37.0 / 255.0, 49.0 / 255.0, 94.0 / 255.0, 1.0)
// MEDIUM_DARK := vec4(36.0 / 255.0, 30.0 / 255.0, 68.0 / 255.0, 1.0)
// DARK := vec4(25.0 / 255.0, 16.0 / 255.0, 46.0 / 255.0, 1.0)
// BLACK := vec4(0.0, 0.0, 0.0, 1.0)

// We need to hard code :d√∏d_og_bedervelse:
func Fragment(dstPos vec4, srcPos vec2) vec4 {
    BRIGHT := vec4(37.0 / 255.0, 49.0 / 255.0, 94.0 / 255.0, 1.0)
    MEDIUM_BRIGHT := vec4(36.0 / 255.0, 30.0 / 255.0, 68.0 / 255.0, 1.0)
    MEDIUM_DARK := vec4(25.0 / 255.0, 16.0 / 255.0, 46.0 / 255.0, 1.0)
    DARK := vec4(21.0 / 255.0, 10.0 / 255.0, 31.0 / 255.0, 1.0)

    octave1 := Amplitude * cnoise(vec3(srcPos * Frequency, Time))
    octave2 := Amplitude * 0.5 * cnoise(vec3(srcPos * Frequency * 2.0, Time))
    octave3 := Amplitude * 0.25 * cnoise(vec3(srcPos * Frequency * 4.0, Time))
    octave4 := Amplitude * 0.125 * cnoise(vec3(srcPos * Frequency * 8.0, Time))

    noise := octave1 + octave2 + octave3 + octave4
    pos := srcPos / Resolution
    falloff := clip(distance(pos, Center)*1.4, 0.35)
    noise *= falloff

    var color vec4
    if noise <= 0.1 {
        color = DARK
    } else if 0.1 <= noise && noise <= 0.15 {
        color = BRIGHT
    } else if 0.15 <= noise && noise <= 0.3 {
        color = MEDIUM_BRIGHT
    } else {
        color = MEDIUM_DARK
    }
    return vec4(color)
}

func clip(x float, threshold float) float {
    return clamp((x - threshold) / (1 - threshold), 0.0, 1.0)
}

//	Classic Perlin 3D Noise 
//	by Stefan Gustavson (https://github.com/stegu/webgl-noise)
//
func permute(x vec4)vec4{return mod(((x*34.0)+1.0)*x, 289.0)}
func taylorInvSqrt(r vec4)vec4{return 1.79284291400159 - 0.85373472095314 * r}
func fade(t vec3) vec3{return t*t*t*(t*(t*6.0-15.0)+10.0)}

func cnoise(P vec3)float{
  Pi0 := floor(P) // Integer part for indexing
  Pi1 := Pi0 + vec3(1.0) // Integer part + 1
  Pi0 = mod(Pi0, 289.0)
  Pi1 = mod(Pi1, 289.0)
  Pf0 := fract(P) // Fractional part for interpolation
  Pf1 := Pf0 - vec3(1.0) // Fractional part - 1.0
  ix := vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x)
  iy := vec4(Pi0.yy, Pi1.yy)
  iz0 := Pi0.zzzz
  iz1 := Pi1.zzzz

    ixy := permute(permute(ix) + iy)
    ixy0 := permute(ixy + iz0)
    ixy1 := permute(ixy + iz1)

  gx0 := ixy0 / 7.0
  gy0 := fract(floor(gx0) / 7.0) - 0.5
  gx0 = fract(gx0)
  gz0 := vec4(0.5) - abs(gx0) - abs(gy0)
  sz0 := step(gz0, vec4(0.0))
  gx0 -= sz0 * (step(0.0, gx0) - 0.5)
  gy0 -= sz0 * (step(0.0, gy0) - 0.5)

  gx1 := ixy1 / 7.0
  gy1 := fract(floor(gx1) / 7.0) - 0.5
  gx1 = fract(gx1)
  gz1 := vec4(0.5) - abs(gx1) - abs(gy1)
  sz1 := step(gz1, vec4(0.0))
  gx1 -= sz1 * (step(0.0, gx1) - 0.5)
  gy1 -= sz1 * (step(0.0, gy1) - 0.5)

  g000 := vec3(gx0.x,gy0.x,gz0.x)
  g100 := vec3(gx0.y,gy0.y,gz0.y)
  g010 := vec3(gx0.z,gy0.z,gz0.z)
  g110 := vec3(gx0.w,gy0.w,gz0.w)
  g001 := vec3(gx1.x,gy1.x,gz1.x)
  g101 := vec3(gx1.y,gy1.y,gz1.y)
  g011 := vec3(gx1.z,gy1.z,gz1.z)
  g111 := vec3(gx1.w,gy1.w,gz1.w)

  norm0 := taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)))
  g000 *= norm0.x
  g010 *= norm0.y
  g100 *= norm0.z
  g110 *= norm0.w
  norm1 := taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)))
  g001 *= norm1.x
  g011 *= norm1.y
  g101 *= norm1.z
  g111 *= norm1.w

  n000 := dot(g000, Pf0)
  n100 := dot(g100, vec3(Pf1.x, Pf0.yz))
  n010 := dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z))
  n110 := dot(g110, vec3(Pf1.xy, Pf0.z))
  n001 := dot(g001, vec3(Pf0.xy, Pf1.z))
  n101 := dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z))
  n011 := dot(g011, vec3(Pf0.x, Pf1.yz))
  n111 := dot(g111, Pf1)

  fade_xyz := fade(Pf0)
  n_z := mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z)
  n_yz := mix(n_z.xy, n_z.zw, fade_xyz.y)
  n_xyz := mix(n_yz.x, n_yz.y, fade_xyz.x) 
  return 2.2 * n_xyz
}
