// Game mechanic ideas (how to make unique mechanics?)
// 0. Spikes
// 1. SLAM BOX
// 2. Teleporters

(Priority: LOW) Fix the "bug" where single-screen-height rooms have two pixels of spare
camera space
(Priority: MEDIUM) Split the main Update function into subfunctions for various disjoint 
entity interactions
(Priority: MEDIUM) Make examples aka non-automated integration tests

// THE MAJOR GRAPHICS/GAME FEEL OVERHAUL
// - PARTICLE SYSTEMS
// - SHADOWS AND LIGHTING (NORMAL MAPPED) eeeh mby not (not yet, that is)
// - CAMERA SHAKE
// - UPDATED ANIMATIONS

// Revamped roadmap because I want to create a demo
// - Generalize the UI system to allow for creation of more arbitrary UIs
// - Actually make the options menu
// - Make slambox positions persist on changing rooms (But probably not with quitting the game!)
// - Allow the user to restart by pressing R
// - Allow for run flag to start in a certain level
// - Add biome title cards
// - Implement camera shake
// - Proper level and scene transitions (dash from one level to the next)
// - Resolve the many TODOs in the project (at least do a few of them)
// - Create animation/sprite asset files

// Post-demo: The design/code quality revamp:
// - Remove the singletons. These should not exist
// - Try to make the packages more independent because right now they really aren't that great
// - (Consider) writing integration tests for packages like animation, rendering, sound, etc.
// - Make an overview of the design of the game
// - Create principles for the file structure. Right now it's kind of random. 
// - Review licensing so I don't get sued
// - Use the race condition checker...
// - Implement generalized input handler
// - Reconsider the 'data.go' files


Consideration: asset manager:
Why do we need this? Well, we should be performing the loading of sprites in another thread
so that we can display a loading screen or something while loading our assets
It's obviously not feasible to just load every resource on startup
Another reason for the asset manager: Right now we are loading assets multiple times
because they aren't stored globally anywhere. This is resource inefficient, with an asset
manager we could load assets and then cache them for later

Note that it may only be necessary to load some assets on startup (i.e. those that 
take a lot of time to load)