// Game mechanic ideas (how to make unique mechanics?)
// 0. Spikes
// 1. SLAM BOX
// 3. One-way platforms

(Priority: LOW) Fix the "bug" where single-screen-height rooms have two pixels of spare
camera space

Bug list:
- Sometimes spamming pause/play while respawning causes the player to not appear
  at all (SEVERITY: LOW)
- Dashing in the same direction as a moving slambox causes the player to hit the slambox and stop in mid 
  air

Levels:
 - Teleporter / door visuals
 - One-way platforms
 - Level transitions (shader O_o)

 - Make it impossible to slam when there is a roof right above
 - Animated sprites
  - 
 - "In-level text" entity
 - Larger sprites in levels (?)
 - Basic enemies (?)
 - Allow for spikes on top of slam boxes

 - NPC stuff

// Revamped roadmap because I want to create a demo
// - Generalized overlay
// - Add biome title cards
// - Add room title cards
// - Create intro sequence when opening the game for the first time
// - Remove the spawnpos system and just spawn at doors instead
//   - Or potentially use savepoints but that's stupid and makes no sense
// - Make some actual levels
// - Make camera zones for levels with large screens
// - Implement some kind of switch or smth as persistent progress
// - Add level title cards
// - Finish slam animation
// - Remake dash animation
// - Resolve the many TODOs in the project (at least do a few of them)
// - Art/idea for level transitions
// - Right now the game crashes if doors have a missing entity ref. Probably nice
//   to fix this or at least give a better warning in ebiten-LDTK.
// - Add a way to skip intro cutscene

// - Cheap hack for camera shake: Set the background color to the same as the darkest color in the tileset

// Post-demo: The design/code quality revamp:
// - Rewrite the overlay system from scratch because it's just so terrible and can't do what i want it to do
// - UI sounds
// - Allow for run flag to start in a certain level
// - Remove the singletons. These should not exist
// - Try to make the packages more independent because right now they really aren't that great
// - (Consider) writing integration tests for packages like animation, rendering, sound, etc.
// - Make an overview of the design of the game
// - Create principles for the file structure. Right now it's kind of random. 
// - Review licensing so I don't get sued
// - Use the race condition checker...
// - Implement generalized input handler
// - Reconsider the 'data.go' files
// - Improve the asset loader, turn into actual editor
// - Create animation/sprite asset files
// - Create a timer class

FIX THE EDITOR

Consideration: asset manager:
Why do we need this? Well, we should be performing the loading of sprites in another thread
so that we can display a loading screen or something while loading our assets
It's obviously not feasible to just load every resource on startup
Another reason for the asset manager: Right now we are loading assets multiple times
because they aren't stored globally anywhere. This is resource inefficient, with an asset
manager we could load assets and then cache them for later

Note that it may only be necessary to load some assets on startup (i.e. those that 
take a lot of time to load)